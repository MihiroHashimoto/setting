# [[plugins]] # for python
# repo = 'davidhalter/jedi-vim'
# on_ft = ['python']
# hook_add = '''
  # let g:jedi#force_py_version = 3
  # " let g:jedi#popup_on_dot = 0
  # " let g:jedi#goto_assignments_command = "<leader>g"
  # " let g:jedi#goto_definitions_command = "<leader>d"
  # " let g:jedi#documentation_command = "K"
  # " let g:jedi#usages_command = "<leader>n"
  # " let g:jedi#rename_command = "<leader>r"
  # " let g:jedi#show_call_signatures = "0"
  # " let g:jedi#completions_command = "<C-Space>"
  # " let g:jedi#smart_auto_mappings = 0
  # " autocmd FileType python setlocal completeopt-=preview
# '''

# [[plugins]] # autocomplete for python
# repo = 'Valloric/YouCompleteMe'
# on_ft = ['python']
# hook_add = '''
  # let g:ycm_auto_trigger = 1
  # let g:ycm_autoclose_preview_window_after_insertion = 1
  # let g:ycm_min_num_of_chars_for_completion = 3
  # set splitbelow
# '''
# deoplete------------------

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# on_i = 1
# hook_add = '''
# let g:deoplete#enable_at_startup   = 1
# let g:deoplete#auto_complete_delay = 0
# '''

[[plugins]] # exec script
repo = 'thinca/vim-quickrun'
on_ft = ['python', 'php']
hook_add = '''
  nnoremap <Leader>r :QuickRun<CR>
'''

[[plugins]] # exec script
repo = 'Shougo/vimproc.vim'
on_ft = ['python', 'php']
build = 'make'

[[plugins]] # sublime search
repo = 'ctrlpvim/ctrlp.vim'
on_path = '.*'
hook_add = '''
  " :help ctrlp-input-formats
  " wildignore
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
  " Ignore files in .gitignore
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
  " CtrlPBuffer
  if !has('gui_running')
    map VimCtrlPBuffer <D-b><CR>
  endif
  map <D-b> :CtrlPBuffer
'''

[[plugins]] # easymotion
repo = 'easymotion/vim-easymotion'
on_path = '.*'
hook_add = '''
  map <Leader> <Plug>(easymotion-prefix)
'''

[[plugins]] # display close tag
repo = 'gregsexton/MatchTag'
on_ft = ['html', 'php']

[[plugins]] # commentout
repo = 'scrooloose/nerdcommenter'
on_path = '.*'
hook_add = '''
  " insert space after comment charactor
  let g:NERDSpaceDelims=1
  nmap <C-_> <Plug>NERDCommenterToggle
  vmap <C-_> <Plug>NERDCommenterToggle

  " for Vue
  let g:ft = ''
  function! NERDCommenter_before()
    if &ft == 'vue'
      let g:ft = 'vue'
      let stack = synstack(line('.'), col('.'))
      if len(stack) > 0
        let syn = synIDattr((stack)[0], 'name')
        if len(syn) > 0
          exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
        endif
      endif
    endif
  endfunction
  function! NERDCommenter_after()
    if g:ft == 'vue'
      setf vue
      let g:ft = ''
    endif
  endfunction
'''

[[plugins]] # emmet-vim
repo = 'mattn/emmet-vim'
on_i = 1
hook_add = '''
  autocmd FileType html,css,scss,sass imap <buffer><expr><tab>
      \ emmet#isExpandable() ? "\<plug>(emmet-expand-abbr)" :
      \ "\<tab>"
  " lang ja
  let g:user_emmet_settings = {
      \ 'variables': {
      \   'lang' : 'ja'
      \ }
      \}
  " snippets 展開方法(html:5)
  let g:user_emmet_settings = {
  \  'variables' : {
  \    'lang' : "ja"
  \  },
  \  'html' : {
  \    'indentation' : '  ',
  \    'snippets' : {
  \      'html:5': "<!DOCTYPE html>\n"
  \        ."<html lang=\"${lang}\">\n"
  \        ."<head>\n"
  \        ."\t<meta charset=\"${charset}\">\n"
  \        ."\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"
  \        ."\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n"
  \        ."\t<title></title>\n"
  \        ."</head>\n"
  \        ."<body>\n\t${child}|\n</body>\n"
  \        ."</html>",
  \    }
  \  }
  \}
'''

[[plugins]] # auto close tag
repo = 'Townk/vim-autoclose'
on_i = 1

[[plugins]] # text move, duplication
repo = 't9md/vim-textmanip'
on_path = '.*'
hook_add = '''
  xmap <Space>d <Plug>(textmanip-duplicate-down)
  nmap <Space>d <Plug>(textmanip-duplicate-down)
  xmap <Space>D <Plug>(textmanip-duplicate-up)
  nmap <Space>D <Plug>(textmanip-duplicate-up)

  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)
'''

[[plugins]] # vim-css-color
repo = 'ap/vim-css-color'
on_ft = ['css', 'scss', 'sass', 'stylus', 'vue', 'html', 'php']

[[plugins]] # stylus
repo = 'wavded/vim-stylus'
on_ft = ['stylus']

[[plugins]] # jsdoc
repo = 'heavenshell/vim-jsdoc'
on_ft = ['javascript', 'typescript']

[[plugins]] # 入力補完
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_add = '''
  " 起動時に有効
  let g:neocomplete#enable_at_startup = 1
  " ポップアップメニューで表示される候補の数
  let g:neocomplete#max_list = 10
  "キーワードの長さ、デフォルトで80
  let g:neocomplete#max_keyword_width = 80
  let g:neocomplete#enable_ignore_case = 1
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  " autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType python setlocal omnifunc=python3complete#Complete
'''

[[plugins]] # snippets
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]] # vim surround
repo = 'tpope/vim-surround'
on_path = '.*'

[[plugins]] # syntax checking
repo = 'w0rp/ale'
on_path = '.*'
hook_add = '''
  " 保存時のみ実行する
  let g:ale_lint_on_text_changed = 0
  " 表示に関する設定
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
  let g:ale_sign_error = '⤫'
  let g:ale_sign_warning = '⚠'
  " let g:ale_sign_error = '🚨'
  " let g:ale_sign_warning = '⚠️'
  let g:airline#extensions#ale#open_lnum_symbol = '('
  let g:airline#extensions#ale#close_lnum_symbol = ')'
  let g:ale_echo_msg_format = '[%linter%]%code: %%s'
  highlight link ALEErrorSign Tag
  highlight link ALEWarningSign StorageClass
  " Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
  " nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  " nmap <silent> <C-j> <Plug>(ale_next_wrap)
  let g:ale_linters = {
  \   'javascript': ['eslint'],
  \   'python'    : ['flake8']
  \}
'''

[[plugins]] # status line
repo = 'vim-airline/vim-airline'
on_source = 'ale'
depends = ['vim-airline-themes']

[[plugins]] # airline-theme
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
  set laststatus=2
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#wordcount#enabled = 0
  let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]
  let g:airline_section_c = '%t'
  let g:airline_section_x = '%{&filetype}'
  let g:airline_section_z = '%3l:%2v %{airline#extensions#ale#get_warning()} %{airline#extensions#ale#get_error()}'
  let g:airline#extensions#default#section_truncate_width = {}
  let g:airline#extensions#whitespace#enabled = 1
'''

[[plugins]] # git conflict markers
repo = 'rhysd/conflict-marker.vim'
on_path = '.*'

[[plugins]] # editor config
repo = 'editorconfig/editorconfig-vim'
on_i = 1

